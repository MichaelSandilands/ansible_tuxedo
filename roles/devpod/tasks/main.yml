# roles/devpod/tasks/main.yml

- name: "Check if DevPod is already installed at {{ devpod_install_path }}"
  ansible.builtin.stat:
    path: "{{ devpod_install_path }}"
  register: devpod_binary_stat

- name: "Get currently installed DevPod version (if present)"
  ansible.builtin.command:
    cmd: "{{ devpod_install_path }} --version"
  register: devpod_current_version_cmd_output
  when: devpod_binary_stat.stat.exists
  changed_when: false
  failed_when: false # Don't fail if version command fails (e.g., old version or file not executable yet)

- name: "Parse current DevPod version string"
  ansible.builtin.set_fact:
    devpod_current_version_string: >-
      {% if devpod_current_version_cmd_output.stdout is not none and
            devpod_current_version_cmd_output.stdout | trim != "" %}
      {{ devpod_current_version_cmd_output.stdout | regex_search('devpod version ([\\d\\.]+)', '\\1') | first | default('') }}
      {% else %}
      {{ '' }}
      {% endif %}
  when:
    - devpod_binary_stat.stat.exists
    - devpod_current_version_cmd_output is defined # Ensures the command task actually ran and registered its output

- name: "Determine if DevPod installation/update is needed"
  ansible.builtin.set_fact:
    install_devpod: >-
      {{ (not devpod_binary_stat.stat.exists) or
         (devpod_version == 'latest' and devpod_current_version_string == '') or
         (devpod_version != 'latest' and devpod_version != 'v' + devpod_current_version_string and devpod_version != devpod_current_version_string) }}
  # The above logic: install if not present, or if specific version requested doesn't match current,
  # or if 'latest' is requested and we couldn't determine current version (so we try to get latest).
  # Note: 'latest' will always re-download unless we can compare against a live latest version number from GitHub.
  # For true idempotency with 'latest', a more complex check against GitHub API for latest release tag would be needed.
  # For simplicity here, 'latest' might re-download but 'install' module will handle actual binary replacement.

- name: "Download DevPod CLI binary (version: {{ devpod_version }})"
  ansible.builtin.get_url:
    url: "{{ devpod_download_url }}"
    dest: "{{ devpod_tmp_download_path }}"
    mode: '0755' # Set execute permissions during download
  when: install_devpod
  register: devpod_download_result

- name: "Install DevPod CLI to {{ devpod_install_path }}"
  become: true # Requires sudo to write to /usr/local/bin
  ansible.builtin.copy: # Using copy as 'install' command was in the example, but get_url already downloads
    src: "{{ devpod_tmp_download_path }}"
    dest: "{{ devpod_install_path }}"
    mode: '0755'
    remote_src: yes # Indicates src is on the remote (controller, or in this case, already on target at /tmp)
  when: install_devpod and devpod_download_result.changed # Only install if downloaded
  # notify: Verify DevPod version # Optional: handler to run 'devpod --version'

- name: "Clean up downloaded DevPod binary from /tmp"
  ansible.builtin.file:
    path: "{{ devpod_tmp_download_path }}"
    state: absent
  when: install_devpod and devpod_download_result.changed # Clean up only if we downloaded

