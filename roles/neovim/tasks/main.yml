# roles/neovim/tasks/main.yml
---
- name: Check if Neovim is already installed
  ansible.builtin.stat:
    path: "{{ neovim_binary_path }}"
  register: neovim_binary_stat

- name: Display Neovim installation status
  ansible.builtin.debug:
    msg: "Neovim binary found at {{ neovim_binary_path }}. Build/install will be skipped unless neovim_force_rebuild is true."
  when: neovim_binary_stat.stat.exists and not neovim_force_rebuild

- name: Install Neovim build dependencies
  ansible.builtin.apt:
    name: "{{ neovim_build_dependencies }}"
    state: present
    update_cache: yes
  become: true
  when: not neovim_binary_stat.stat.exists or neovim_force_rebuild

- name: Ensure Neovim build parent directory exists
  ansible.builtin.file:
    path: "{{ neovim_build_parent_dir }}"
    state: directory
    mode: '0755'
  when: not neovim_binary_stat.stat.exists or neovim_force_rebuild

- name: Clone or update Neovim 'stable' branch
  ansible.builtin.git:
    repo: "{{ neovim_repo_url }}"
    dest: "{{ neovim_source_dir }}"
    version: "stable" # Hardcoded to stable branch
    depth: 1          # Shallow clone for the stable branch
    force: yes        # Ensures 'stable' branch is checked out and updated if repo exists
  register: neovim_git_clone
  when: not neovim_binary_stat.stat.exists or neovim_force_rebuild

- name: Build Neovim
  ansible.builtin.make:
    chdir: "{{ neovim_source_dir }}"
    params:
      CMAKE_BUILD_TYPE: "{{ neovim_cmake_build_type }}"
      CMAKE_INSTALL_PREFIX: "{{ neovim_install_prefix }}"
  register: neovim_build_result
  # Build if not installed, or forced, or if git clone resulted in changes (e.g., updated stable branch)
  when: (not neovim_binary_stat.stat.exists or neovim_force_rebuild or neovim_git_clone.changed)

- name: Install Neovim
  ansible.builtin.make:
    chdir: "{{ neovim_source_dir }}"
    target: install
  become: true
  when: neovim_build_result.changed # Only install if a new build happened

# Optional: Clean up build directory
# - name: Clean up Neovim build directory
#   ansible.builtin.file:
#     path: "{{ neovim_source_dir }}"
#     state: absent
#   when: neovim_build_result.changed # Or some other condition

