---
# roles/lazygit/tasks/main.yml

- name: "Gather latest Lazygit version if 'latest' is specified"
  when: lazygit_version == "latest"
  block:
    - name: "Fetch latest Lazygit release information from GitHub API"
      ansible.builtin.uri:
        url: "https://api.github.com/repos/jesseduffield/lazygit/releases/latest"
        method: GET
        return_content: yes
        headers:
          Accept: "application/vnd.github.v3+json"
      register: lazygit_latest_release_info
      until: lazygit_latest_release_info.status == 200
      retries: 3
      delay: 5

    - name: "Set effective Lazygit version from latest release tag"
      ansible.builtin.set_fact:
        lazygit_effective_version: "{{ (lazygit_latest_release_info.json.tag_name | regex_replace('^v', '')) }}"
  rescue:
    - name: "Failed to fetch latest version, falling back or failing"
      ansible.builtin.fail:
        msg: "Could not automatically determine the latest Lazygit version. Please specify a specific version for 'lazygit_version'."
      # Alternatively, you could set a hardcoded fallback version here if preferred.

- name: "Set effective Lazygit version if a specific version is provided"
  when: lazygit_version != "latest"
  ansible.builtin.set_fact:
    lazygit_effective_version: "{{ lazygit_version | regex_replace('^v', '') }}"

- name: "Construct Lazygit download URL"
  ansible.builtin.set_fact:
    lazygit_download_url: "{{ lazygit_github_releases_url }}/download/v{{ lazygit_effective_version }}/{{ lazygit_archive_name_template }}"

- name: "Check current Lazygit version if installed"
  ansible.builtin.command: "{{ lazygit_install_path }} --version"
  register: lazygit_current_version_cmd
  changed_when: false
  failed_when: false
  check_mode: false # Always run this to get current version info

- name: "Parse current Lazygit version string"
  ansible.builtin.set_fact:
    lazygit_current_version_string: "{{ lazygit_current_version_cmd.stdout | regex_search('version=([\\d\\.]+)', '\\1') | first | default('') }}"
  when: lazygit_current_version_cmd.rc == 0 and lazygit_current_version_cmd.stdout is defined

- name: "Determine if Lazygit installation/update is needed"
  ansible.builtin.set_fact:
    install_lazygit: >-
      {{ (lazygit_current_version_cmd.rc != 0) or
         (lazygit_current_version_string != lazygit_effective_version) }}

- name: "Ensure temporary extraction directory exists and is empty"
  when: install_lazygit
  ansible.builtin.file:
    path: "{{ lazygit_tmp_extract_path }}"
    state: "{{ item }}"
  loop:
    - absent
    - directory

- name: "Download Lazygit v{{ lazygit_effective_version }} archive"
  when: install_lazygit
  ansible.builtin.get_url:
    url: "{{ lazygit_download_url }}"
    dest: "{{ lazygit_tmp_archive_path }}"
    mode: '0644'
  register: lazygit_download_result

- name: "Extract Lazygit binary from archive"
  when: install_lazygit and lazygit_download_result.changed
  ansible.builtin.unarchive:
    src: "{{ lazygit_tmp_archive_path }}"
    dest: "{{ lazygit_tmp_extract_path }}"
    remote_src: yes
    # Assuming the tarball contains the 'lazygit' binary directly or in a subdirectory.
    # If it's in a subdirectory and you want to strip it, extra_opts might be needed,
    # or adjust the src path in the copy task below.
    # For Lazygit, the tarball typically contains just the 'lazygit' binary and license/readme.

- name: "Install Lazygit binary to {{ lazygit_install_path }}"
  become: true # Requires sudo to write to /usr/local/bin
  when: install_lazygit and lazygit_download_result.changed
  ansible.builtin.copy:
    src: "{{ lazygit_tmp_extract_path }}/lazygit" # Assumes binary is named 'lazygit' in the archive
    dest: "{{ lazygit_install_path }}"
    mode: '0755'
    remote_src: yes
  register: lazygit_install_result

- name: "Clean up temporary downloaded archive and extracted files"
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ lazygit_tmp_archive_path }}"
    - "{{ lazygit_tmp_extract_path }}"
  when: lazygit_download_result.changed

