# local.yml

---
- name: Provision local Tuxedo OS machine for development
  hosts: localhost

  pre_tasks:
    - name: Update apt cache
      become: true
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Upgrade all installed packages
      become: true
      ansible.builtin.apt:
        upgrade: dist

    - name: Add the flathub flatpak repository remote to the user installation
      community.general.flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo
        method: user

  roles:
    # Add ssh key and config
    - role: ssh

    # Install common developer tools
    - role: apt

    # Add user.name and user.email to .gitconfig
    - role: git

    # Add and Obsidian via flatpak
    - role: flatpak

    # Add kitty terminal
    - role: kitty

    # Add starship prompt
    - role: starship

    # Add JetBrainsMono Nerd Font
    - role: nerdfont

    # Add neovim via ansible-galazy gikeymarcia.neovim role
    - role: gikeymarcia.neovim
      become: true

    # Add docker via ansible-galaxy geerlingguy.docker
    - role: geerlingguy.docker
      become: true
      vars:
        docker_users:
          - "{{ ansible_user_id }}" # Adds the current ansible user to the docker group

    # Add quarto via ansible-galaxy Appsilon.quarto
    - role: Appsilon.quarto
      become: true

    # Add R via ansible-galaxy appsilon.r_language
    - role: R
      become: true

    # Install devpod
    - role: devpod

    # Add lazygit
    - role: lazygit

    # Add miniconda via ansible-galazy andrewrothstein.miniconda role
    # In local.yml
    - role: andrewrothstein.miniconda
      # become: true # May not be needed at the role level if all paths are user-writable
                  # and the role doesn't have other pre-flight tasks requiring root.
                  # However, the role might still attempt to install dependencies like 'bash'.
                  # For safety, start with become: true, and if it works, you could test without.
      vars:
        miniconda_prefix: "/home/{{ ansible_user_id }}/miniconda3"  # Install into michael's home
        miniconda_owner: "{{ ansible_user_id }}"                 # Owned by michael
        miniconda_group: "{{ ansible_user_gid }}"                # Group michael
        miniconda_escalate: false             # IMPORTANT: Run the installer script as michael, not root
        miniconda_update_rc: true             # Allow the role to run 'conda init' for miniconda_owner
        miniconda_auto_activate_base: false # Optional: recommended
        # miniconda_init_shells: ['bash', 'zsh'] # Specify shells for conda init (optional, role has defaults)
